name: Deploy Azure Function

on:
  # Run this ONLY after Terraform (infra) finishes successfully
  workflow_run:
    workflows: [ "Terraform (infra)" ]   # must match the 'name:' in deploy-infra.yml
    types: [ completed ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: function-deploy
  cancel-in-progress: true

env:
  AZURE_FUNCTIONAPP_NAME: afemailsjs-func
  NODE_VERSION: '20.x'
  WORKING_DIR: 'function'

jobs:
  deploy:
    # Only proceed if Terraform workflow concluded SUCCESS
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout same commit Terraform ran against
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install production deps
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm ci
          npm prune --omit=dev

      - name: Azure login (OIDC via tf-deployer)
        uses: azure/login@v2
        with:  # read from Github secrets
          client-id:   "bdbc6bec-6f3d-48b9-99e9-6bbcc0ef51f5"        # tf-deployer app (client) ID 
          tenant-id:   "6dd7381d-4ace-410a-b7f3-011a192ebe60"       # your tenant ID
          subscription-id:  "c1b1f12b-41c7-4fb3-b5ac-02e36ce1331e"   # your subscription ID
          enable-AzPSSession: true  # needed for az account show
          environment: 'AzureCloud' # or 'AzureUSGovernment' etc.
          allow-no-subscriptions: true
          audience: api://AzureADTokenExchange
          auth-type: SERVICE_PRINCIPAL
      - name: Who am I (sanity check)
        run: az account show --query "{sub:id, tenant:tenantId}" -o table

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.WORKING_DIR }}
