name: Deploy Azure Function

on:
  workflow_run:
    workflows: ["Terraform (infra)"]
    types: [completed]
  workflow_dispatch:
    inputs:
      app_name:
        description: "Function App name (overrides env)"
        required: false
      package_path:
        description: "Folder with host.json"
        required: false
        default: "function"
  push:
    branches: [ main ]
    paths:
      - "function/**"
      - ".github/workflows/deploy-function.yml"

permissions:
  id-token: write
  contents: read

concurrency:
  group: function-deploy
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"
  WORKING_DIR: "function"
  AZURE_RESOURCE_GROUP: "rg-mailjs"
  AZURE_FUNCTIONAPP_NAME: "func-mailjs"

jobs:
  deploy:
    # If triggered by workflow_run, only continue when the infra workflow succeeded
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use the exact commit Terraform ran against when triggered by workflow_run
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Resolve package path / app name from inputs (if provided)
        id: resolve
        run: |
          PKG="${{ github.event.inputs.package_path }}"
          APP="${{ github.event.inputs.app_name }}"
          echo "pkg=${PKG:-${{ env.WORKING_DIR }}}" >> $GITHUB_OUTPUT
          echo "app=${APP:-${{ env.AZURE_FUNCTIONAPP_NAME }}}" >> $GITHUB_OUTPUT

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ steps.resolve.outputs.pkg }}/package-lock.json

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}       # bdbc6bec-... in secrets
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}       # 6dd7381d-... in secrets
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Verify target Function App exists
        run: az functionapp show -g "${{ env.AZURE_RESOURCE_GROUP }}" -n "${{ steps.resolve.outputs.app }}"

      - name: Install deps
        working-directory: ${{ steps.resolve.outputs.pkg }}
        run: npm install --omit=dev

      - name: Verify axios exists
        working-directory: ${{ steps.resolve.outputs.pkg }}
        run: |
          test -f package.json || (echo "No package.json" && exit 1)
          test -d node_modules || (echo "node_modules missing" && exit 1)
          test -d node_modules/axios || (echo "axios missing" && exit 1)
          node -e "require.resolve('axios'); console.log('axios resolved OK')"

      # Deploy via Kudu zipdeploy (Oryx build on server)
      - name: Deploy functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ./${{ steps.resolve.outputs.pkg }}   # points at the folder with host.json
          respect-funcignore: true
          enable-oryx-build: false
          remote-build: false
          scm-do-build-during-deployment: false

      - name: Verify deployed package contains deps
        run: |
          PKG_URL="$(az functionapp config appsettings list -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --query "[?name=='WEBSITE_RUN_FROM_PACKAGE'].value" -o tsv)"
          echo "Package URL: $PKG_URL"
          curl -L "$PKG_URL" -o deployed.zip
          unzip -l deployed.zip | grep -m1 "node_modules/axios" || (echo "NO AXIOS IN PACKAGE" && exit 1)

      - name: Restart and list functions (sanity)
        run: |
          az functionapp restart -g "${{ env.AZURE_RESOURCE_GROUP }}" -n "${{ steps.resolve.outputs.app }}"
      
