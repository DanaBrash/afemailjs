name: Terraform (infra)

on:
  push:
    branches: [ "main" ]
    paths:
      - "infra/**"
      - ".github/workflows/deploy-infra.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "infra/**"
      - ".github/workflows/deploy-infra.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# keep your original 'single lane' behavior
concurrency:
  group: infra-terraform
  cancel-in-progress: true

env:
  WORKING_DIR: infra
  TF_IN_AUTOMATION: "true"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Terraform fmt (check)
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform fmt -check -recursive -diff

      # Login so azurerm backend can init (works for same-repo PRs and main)
      - name: Azure login (OIDC)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: azure/login@v2
        with:
          client-id:   "bdbc6bec-6f3d-48b9-99e9-6bbcc0ef51f5"        # ${{ secrets.AZURE_CLIENT_ID }}  tf-deployer app (client) ID 
          tenant-id:   "6dd7381d-4ace-410a-b7f3-011a192ebe60"        # ${{ secrets.AZURE_TENANT_ID }}  your tenant ID
          subscription-id:  "c1b1f12b-41c7-4fb3-b5ac-02e36ce1331e"   # ${{ secrets.AZURE_SUBSCRIPTION_ID }}  your subscription ID

      # Clean local cache between runs (keep lockfile)
      - name: Clean TF cache
        run: rm -rf "${{ env.WORKING_DIR }}/.terraform"

      # Init with REAL backend whenever we can log in (so plan works)
      - name: Terraform init (remote backend)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terraform init -reconfigure -upgrade -input=false             -backend-config="resource_group_name=env-rg"             -backend-config="storage_account_name=calabashtfstate"             -backend-config="container_name=tfstate"             -backend-config="key=afemailjs/terraform.tfstate"             -backend-config="use_azuread_auth=true"

      # For fork PRs (no secrets), do a backendless init so validate still runs
      - name: Terraform init (no backend) for fork PRs
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init -backend=false -reconfigure -upgrade -input=false

      - name: Terraform validate
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform validate

      # Run plan when backend is initialized (same-repo PRs and main)
      - name: Terraform plan (speculative)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -no-color -input=false

      # Apply only on push to main (never on PRs)
      - name: Terraform apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform apply -auto-approve -input=false
